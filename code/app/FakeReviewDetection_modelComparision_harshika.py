# -*- coding: utf-8 -*-
"""yelp-dataset-based-on-fake (1).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fso5JeQoRkX4BV2kNeAEGSLiF5rxeT4r

## Introduction
This notebook contains implementation of models for classifying whether review is fake or real.
"""

from mpl_toolkits.mplot3d import Axes3D
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt # plotting
import numpy as np # linear algebra
import os # accessing directory structure
import pandas as pd # data processing, CSV file I/O (e.g. pd.read\_from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.naive_bayes import GaussianNB
from sklearn.naive_bayes import MultinomialNB
from sklearn.linear_model import SGDClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.ensemble import GradientBoostingClassifier
from lightgbm import LGBMClassifier
from xgboost.sklearn import XGBClassifier
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression

from sklearn.compose import ColumnTransformer, make_column_transformer
from sklearn.dummy import DummyClassifier
from sklearn.impute import SimpleImputer
from sklearn.model_selection import cross_val_score, cross_validate, train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.pipeline import Pipeline, make_pipeline
from sklearn.preprocessing import OneHotEncoder, OrdinalEncoder, StandardScaler
from sklearn.svm import SVC
from sklearn.tree import DecisionTreeClassifier
import pandas as pd
import numpy as np

from sklearn.model_selection import(
    cross_validate,
    train_test_split
)

import warnings
warnings.filterwarnings("ignore")

"""There is 1 csv file in the current version of the dataset:

"""

# print(os.listdir('../input'))

"""Functions for plotting data."""

# Distribution graphs (histogram/bar graph) of column data
def plotPerColumnDistribution(df, nGraphShown, nGraphPerRow):
    nunique = df.nunique()
    df = df[[col for col in df if nunique[col] > 1 and nunique[col] < 50]] # For displaying purposes, pick columns that have between 1 and 50 unique values
    nRow, nCol = df.shape
    columnNames = list(df)
    nGraphRow = (nCol + nGraphPerRow - 1) / nGraphPerRow
    plt.figure(num = None, figsize = (6 * nGraphPerRow, 8 * nGraphRow), dpi = 80, facecolor = 'w', edgecolor = 'k')
    for i in range(min(nCol, nGraphShown)):
        plt.subplot(nGraphRow, nGraphPerRow, i + 1)
        columnDf = df.iloc[:, i]
        if (not np.issubdtype(type(columnDf.iloc[0]), np.number)):
            valueCounts = columnDf.value_counts()
            valueCounts.plot.bar()
        else:
            columnDf.hist()
        plt.ylabel('counts')
        plt.xticks(rotation = 90)
        plt.title(f'{columnNames[i]} (column {i})')
    plt.tight_layout(pad = 1.0, w_pad = 1.0, h_pad = 1.0)
    plt.show()

# Correlation matrix
def plotCorrelationMatrix(df, graphWidth):
    filename = df.dataframeName
    df = df.dropna('columns') # drop columns with NaN
    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values
    if df.shape[1] < 2:
        print(f'No correlation plots shown: The number of non-NaN or constant columns ({df.shape[1]}) is less than 2')
        return
    corr = df.corr()
    plt.figure(num=None, figsize=(graphWidth, graphWidth), dpi=80, facecolor='w', edgecolor='k')
    corrMat = plt.matshow(corr, fignum = 1)
    plt.xticks(range(len(corr.columns)), corr.columns, rotation=90)
    plt.yticks(range(len(corr.columns)), corr.columns)
    plt.gca().xaxis.tick_bottom()
    plt.colorbar(corrMat)
    plt.title(f'Correlation Matrix for {filename}', fontsize=15)
    plt.show()

# Scatter and density plots
def plotScatterMatrix(df, plotSize, textSize):
    df = df.select_dtypes(include =[np.number]) # keep only numerical columns
    # Remove rows and columns that would lead to df being singular
    df = df.dropna('columns')
    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values
    columnNames = list(df)
    if len(columnNames) > 10: # reduce the number of columns for matrix inversion of kernel density plots
        columnNames = columnNames[:10]
    df = df[columnNames]
    ax = pd.plotting.scatter_matrix(df, alpha=0.75, figsize=[plotSize, plotSize], diagonal='kde')
    corrs = df.corr().values
    for i, j in zip(*plt.np.triu_indices_from(ax, k = 1)):
        ax[i, j].annotate('Corr. coef = %.3f' % corrs[i, j], (0.8, 0.2), xycoords='axes fraction', ha='center', va='center', size=textSize)
    plt.suptitle('Scatter and Density Plot')
    plt.show()

"""Understanding Data and Visualization"""

from google.colab import drive
drive.mount('/content/drive')

nRowsRead = 1000 # specify 'None' if want to read whole file
df1 = pd.read_csv('/content/drive/MyDrive/yelpDataset/cleaned_data.csv', delimiter=',', nrows = nRowsRead)
df1.dataframeName = 'cleaned_data.csv'
nRow, nCol = df1.shape
# print(f'There are {nRow} rows and {nCol} columns')
df1.head()

"""Let's take a quick look at what the data looks like:"""

df1['Faker'].unique()
df1.head(5)

df1.corr()

"""Distribution graphs (histogram/bar graph) of sampled columns:"""

plotPerColumnDistribution(df1, 10, 5)

"""Correlation matrix:"""

plotCorrelationMatrix(df1, 11)

"""Scatter and density plots:"""

plotScatterMatrix(df1, 20, 10)

"""Implementation of classification models and comparisions"""

X=  df1.drop("Faker", axis='columns')
y= df1['Faker']
X_train, X_test, Y_train, Y_test = train_test_split(X,y,
                                     test_size=0.3,
                                     random_state=2018)

def mean_cross_val_scores(model, X_train, y_train, **kwargs):
    
    scores = cross_validate(model, X_train, y_train, **kwargs)

    mean_scores = pd.DataFrame(scores).mean()
    out_col = []

    for i in range(len(mean_scores)):
        out_col.append(round(mean_scores[i], 3))

    return pd.Series(data=out_col, index=mean_scores.index)

models = {
    "decision tree": DecisionTreeClassifier(random_state=2018),
    "kNN": KNeighborsClassifier(),
    "RBF SVM": SVC(random_state=2018),
}

models_short = {
     "decision tree": 'DecisionTree',
    "kNN": 'kNN',
    'RBF SVM': 'SVC',
}

results_dict = {}
for i in models:
    pipe_temp = make_pipeline(models[i])
    results_dict[models_short[i]] = mean_cross_val_scores(
    pipe_temp, X_train, Y_train, cv=5, return_train_score=True)
    
print(pd.DataFrame(results_dict))

"""Implying hyperparameter on SVC to increase efficiency"""

param_grid = {"C": np.logspace(-2, 2, 4)}

results_dict = {}
for i in param_grid["C"]:
    pipe_temp = make_pipeline(SVC(C=i, random_state=2018))
    results_dict[i] = mean_cross_val_scores(
    pipe_temp, X_train, Y_train, cv=5, return_train_score=True)
    
hyper_C = pd.DataFrame(results_dict).T
hyper_C.index.name='Hyperparameter: C'
print(hyper_C)

"""# Comparing various classification models"""

models = {
    "decision tree": DecisionTreeClassifier(random_state=2018),
    "kNN": KNeighborsClassifier(),
    "RBF SVM": SVC(random_state=2018),
    "LR" : LogisticRegression(random_state=0),
    "GB": GaussianNB(),
    "MNB" : MultinomialNB(),
    "SGDcl" : SGDClassifier(max_iter=1000, tol=1e-3)
    
    
}

models_short = {
     "decision tree": 'DecisionTree',
    "kNN": 'kNN',
    'RBF SVM': 'SVC',
    "LR" : 'logisticRegression',
    "GB": 'GaussianNB',
    "MNB" : 'MultinomialNB',
    "SGDcl" : 'SGDClassifier'
}

results_dict = {}
for i in models:
    pipe_temp = make_pipeline(models[i])
    results_dict[models_short[i]] = mean_cross_val_scores(
    pipe_temp, X_train, Y_train, cv=5, return_train_score=True)
    
print(pd.DataFrame(results_dict))