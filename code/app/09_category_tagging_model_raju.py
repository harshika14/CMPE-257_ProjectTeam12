# -*- coding: utf-8 -*-
"""09_Category_tagging_model_Raju.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1agxEiOsmlcsyq32g6OBNYM9CxWe7b3QZ
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import nltk
from nltk.corpus import stopwords
from tqdm import tqdm
from tqdm import tqdm_notebook
import string
from collections import Counter
import itertools
from sklearn import metrics
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.svm import LinearSVC
from sklearn.pipeline import Pipeline, FeatureUnion
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score,precision_score,recall_score,classification_report
import pickle

tag_dataset=pd.read_csv("tagging_dataset.csv")
tag_dataset=tag_dataset.reset_index(drop=True)

tag_dataset=tag_dataset[["text","categories"]]

tag_dataset

tag_dataset['labels'] = tag_dataset.categories.astype('category').cat.codes

### creating labels



label_dict={0:"Active Life", 1:"Automotive",2:"Beauty & Spas",3:"Restaurants",4:"Shopping"}

type(label_dict)

tag_dataset



text=tag_dataset['text'].values.tolist()
labels=tag_dataset['labels'].values.tolist()

X_train, X_test, y_train, y_test = train_test_split(text, labels, test_size=0.15, random_state=42, shuffle =False)

training_pipe=Pipeline([("Vectorization",TfidfVectorizer()),("SVC",LinearSVC())])

training_pipe.fit(X_train,y_train)

print('Training set score: ' + str(training_pipe.score(X_train,y_train)))
print('Test set score: ' + str(training_pipe.score(X_test,y_test)))

yhat=training_pipe.predict(X_test)

ytrue=y_test

from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay
cm=confusion_matrix(ytrue, yhat)
disp = ConfusionMatrixDisplay(confusion_matrix=cm)
disp.plot()

print(metrics.classification_report(ytrue, yhat))

out=training_pipe.predict(['This is one of the best session I had, almost i am refreshed'])[0]

label_dict.get(out)

with open('tagging_model.pickle', 'wb') as f:
  pickle.dump(training_pipe, f)